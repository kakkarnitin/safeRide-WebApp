name: Deploy .NET App to Ultra-Cheap Azure Container

on:
  push:
    branches: [ main ]
    paths: 
      - 'SafeRide/backend/**'
  workflow_dispatch:

jobs:
  build-and-deploy-dotnet:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and Test .NET Application
      run: |
        cd SafeRide/backend/src/SafeRide.Api
        
        # Restore dependencies
        dotnet restore
        
        # Build application
        dotnet build --configuration Release --no-restore
        
        # Run tests (if any)
        cd ../../../
        dotnet test --configuration Release --no-build --verbosity normal || echo "No tests found"
        
        # Return to API directory
        cd backend/src/SafeRide.Api
    
    - name: Create Dockerfile
      run: |
        cd SafeRide/backend
        
        cat > Dockerfile << 'EOF'
        FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
        WORKDIR /app
        EXPOSE 80
        
        FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
        WORKDIR /src
        
        # Copy project files for dependency resolution
        COPY ["src/SafeRide.Api/SafeRide.Api.csproj", "src/SafeRide.Api/"]
        COPY ["src/SafeRide.Core/SafeRide.Core.csproj", "src/SafeRide.Core/"]
        COPY ["src/SafeRide.Infrastructure/SafeRide.Infrastructure.csproj", "src/SafeRide.Infrastructure/"]
        
        # Restore dependencies
        RUN dotnet restore "src/SafeRide.Api/SafeRide.Api.csproj"
        
        # Copy all source code
        COPY . .
        
        # Build and publish
        WORKDIR "/src/src/SafeRide.Api"
        RUN dotnet build "SafeRide.Api.csproj" -c Release -o /app/build
        RUN dotnet publish "SafeRide.Api.csproj" -c Release -o /app/publish --no-restore
        
        FROM base AS final
        WORKDIR /app
        COPY --from=build /app/publish .
        
        # Create data directory for SQLite
        RUN mkdir -p /data
        
        # Set environment variables
        ENV ASPNETCORE_ENVIRONMENT=Production
        ENV ASPNETCORE_URLS=http://+:80
        ENV ConnectionStrings__DefaultConnection="Data Source=/data/saferide.db"
        ENV UseSQLite=true
        
        ENTRYPOINT ["dotnet", "SafeRide.Api.dll"]
        EOF
    
    - name: Get Azure Container Registry Details
      id: acr-details
      run: |
        # Get ACR name (assumes it exists from initial deployment)
        ACR_NAME=$(az acr list --resource-group saferide-free-rg --query "[0].name" --output tsv)
        ACR_LOGIN_SERVER=$(az acr list --resource-group saferide-free-rg --query "[0].loginServer" --output tsv)
        
        echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
        echo "Using ACR: $ACR_NAME ($ACR_LOGIN_SERVER)"
    
    - name: Build and Push Docker Image
      run: |
        cd SafeRide/backend
        
        # Login to Azure Container Registry
        az acr login --name ${{ steps.acr-details.outputs.acr_name }}
        
        # Build image with timestamp tag
        IMAGE_TAG="${{ steps.acr-details.outputs.acr_login_server }}/saferide-api:$(date +%Y%m%d-%H%M%S)"
        LATEST_TAG="${{ steps.acr-details.outputs.acr_login_server }}/saferide-api:latest"
        
        docker build -t "$IMAGE_TAG" -t "$LATEST_TAG" .
        
        # Push both tags
        docker push "$IMAGE_TAG"
        docker push "$LATEST_TAG"
        
        echo "Pushed image: $IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Update Container Instance
      run: |
        # Get ACR credentials
        ACR_NAME=${{ steps.acr-details.outputs.acr_name }}
        ACR_PASSWORD=$(az acr credential show --name "$ACR_NAME" --query "passwords[0].value" --output tsv)
        
        # Delete existing container instance
        az container delete \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --yes || echo "Container doesn't exist yet"
        
        # Wait a moment for deletion
        sleep 30
        
        # Get storage account details
        STORAGE_ACCOUNT=$(az storage account list --resource-group saferide-free-rg --query "[0].name" --output tsv)
        STORAGE_KEY=$(az storage account keys list --resource-group saferide-free-rg --account-name "$STORAGE_ACCOUNT" --query '[0].value' --output tsv)
        
        # Create new container instance with updated image
        az container create \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --image "${{ steps.acr-details.outputs.acr_login_server }}/saferide-api:latest" \
          --registry-login-server "${{ steps.acr-details.outputs.acr_login_server }}" \
          --registry-username "$ACR_NAME" \
          --registry-password "$ACR_PASSWORD" \
          --dns-name-label "saferide-api-$(date +%s | tail -c 6)" \
          --ports 80 \
          --cpu 0.5 \
          --memory 1 \
          --os-type Linux \
          --environment-variables \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:80 \
            ConnectionStrings__DefaultConnection="Data Source=/data/saferide.db" \
            UseSQLite=true \
            Authentication__Microsoft__ClientId="${{ secrets.MICROSOFT_CLIENT_ID }}" \
            Authentication__Microsoft__ClientSecret="${{ secrets.MICROSOFT_CLIENT_SECRET }}" \
            Authentication__Microsoft__TenantId="${{ secrets.MICROSOFT_TENANT_ID }}" \
            Email__SmtpPassword="${{ secrets.SMTP_PASSWORD }}" \
          --azure-file-volume-account-name "$STORAGE_ACCOUNT" \
          --azure-file-volume-account-key "$STORAGE_KEY" \
          --azure-file-volume-share-name "saferide-data" \
          --azure-file-volume-mount-path "/data" \
          --restart-policy OnFailure
    
    - name: Get Deployment Info
      run: |
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 60
        
        # Get container URL
        FQDN=$(az container show \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --query "ipAddress.fqdn" \
          --output tsv)
        
        echo "üöÄ Deployment completed!"
        echo "üìã Container URL: http://$FQDN"
        echo "üìÑ Swagger UI: http://$FQDN/swagger"
        echo "üîó API Base: http://$FQDN/api"
        
        # Test if API is responding
        echo "üß™ Testing API health endpoint..."
        for i in {1..5}; do
          if curl -s "http://$FQDN/api/health" &>/dev/null; then
            echo "‚úÖ API is responding!"
            break
          else
            echo "‚è≥ Attempt $i: API not ready yet, waiting..."
            sleep 30
          fi
        done
