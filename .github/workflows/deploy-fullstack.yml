name: Deploy Complete SafeRide App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: SafeRide/frontend/package-lock.json
    
    - name: Install Dependencies
      run: |
        cd SafeRide/frontend
        npm ci
    
    - name: Build Frontend
      run: |
        cd SafeRide/frontend
        npm run build
    
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "SafeRide/frontend"
        output_location: "dist"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build .NET Application
      run: |
        cd SafeRide/backend/src/SafeRide.Api
        
        echo "üî® Building SafeRide .NET API..."
        
        # Restore dependencies
        dotnet restore
        
        # Build application
        dotnet build --configuration Release --no-restore
        
        # Run tests (if any)
        cd ../../../
        dotnet test --configuration Release --no-build --verbosity normal || echo "‚ö†Ô∏è No tests found"
        
        echo "‚úÖ .NET application built successfully"
    
    - name: Create Production Dockerfile
      run: |
        cd SafeRide/backend
        
        cat > Dockerfile << 'EOF'
        # Multi-stage Dockerfile for SafeRide API
        FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
        WORKDIR /app
        EXPOSE 80
        
        # Install SQLite (if needed for migrations)
        RUN apt-get update && apt-get install -y sqlite3 && rm -rf /var/lib/apt/lists/*
        
        FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
        WORKDIR /src
        
        # Copy project files for better caching
        COPY ["src/SafeRide.Api/SafeRide.Api.csproj", "src/SafeRide.Api/"]
        COPY ["src/SafeRide.Core/SafeRide.Core.csproj", "src/SafeRide.Core/"]
        COPY ["src/SafeRide.Infrastructure/SafeRide.Infrastructure.csproj", "src/SafeRide.Infrastructure/"]
        
        # Restore dependencies
        RUN dotnet restore "src/SafeRide.Api/SafeRide.Api.csproj"
        
        # Copy source code
        COPY . .
        
        # Build and publish
        WORKDIR "/src/src/SafeRide.Api"
        RUN dotnet build "SafeRide.Api.csproj" -c Release -o /app/build
        RUN dotnet publish "SafeRide.Api.csproj" -c Release -o /app/publish --no-restore
        
        FROM base AS final
        WORKDIR /app
        COPY --from=build /app/publish .
        
        # Create data directory for SQLite
        RUN mkdir -p /data
        
        # Set production environment
        ENV ASPNETCORE_ENVIRONMENT=Production
        ENV ASPNETCORE_URLS=http://+:80
        ENV ConnectionStrings__DefaultConnection="Data Source=/data/saferide.db"
        ENV UseSQLite=true
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:80/api/health || exit 1
        
        ENTRYPOINT ["dotnet", "SafeRide.Api.dll"]
        EOF
        
        echo "üì¶ Dockerfile created"
    
    - name: Setup Azure Container Registry
      id: acr-setup
      run: |
        echo "üîß Setting up Azure Container Registry..."
        
        # Get or create ACR
        ACR_NAME=$(az acr list --resource-group saferide-free-rg --query "[0].name" --output tsv 2>/dev/null || echo "")
        
        if [ -z "$ACR_NAME" ]; then
          # Create ACR if it doesn't exist
          ACR_NAME="saferideacr$(date +%s | tail -c 6)"
          echo "Creating new ACR: $ACR_NAME"
          
          az acr create \
            --resource-group saferide-free-rg \
            --name "$ACR_NAME" \
            --sku Basic \
            --admin-enabled true
        fi
        
        ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group saferide-free-rg --query "loginServer" --output tsv)
        
        echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Using ACR: $ACR_NAME ($ACR_LOGIN_SERVER)"
    
    - name: Build and Push Docker Image
      run: |
        cd SafeRide/backend
        
        echo "üê≥ Building and pushing Docker image..."
        
        # Login to Azure Container Registry
        az acr login --name ${{ steps.acr-setup.outputs.acr_name }}
        
        # Create unique image tags
        COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        IMAGE_TAG="${{ steps.acr-setup.outputs.acr_login_server }}/saferide-api:${TIMESTAMP}-${COMMIT_SHA}"
        LATEST_TAG="${{ steps.acr-setup.outputs.acr_login_server }}/saferide-api:latest"
        
        # Build image
        docker build -t "$IMAGE_TAG" -t "$LATEST_TAG" .
        
        # Push both tags
        docker push "$IMAGE_TAG"
        docker push "$LATEST_TAG"
        
        echo "‚úÖ Images pushed:"
        echo "   - $IMAGE_TAG"
        echo "   - $LATEST_TAG"
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
    
    - name: Deploy to Azure Container Instance
      run: |
        echo "üöÄ Deploying to Azure Container Instance..."
        
        # Get ACR credentials
        ACR_NAME=${{ steps.acr-setup.outputs.acr_name }}
        ACR_PASSWORD=$(az acr credential show --name "$ACR_NAME" --query "passwords[0].value" --output tsv)
        
        # Delete existing container (if exists)
        echo "Stopping existing container..."
        az container delete \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --yes || echo "No existing container found"
        
        # Wait for deletion
        sleep 30
        
        # Get or create storage for persistent data
        STORAGE_ACCOUNT=$(az storage account list --resource-group saferide-free-rg --query "[0].name" --output tsv 2>/dev/null || echo "")
        
        if [ -z "$STORAGE_ACCOUNT" ]; then
          STORAGE_ACCOUNT="saferidestore$(date +%s | tail -c 6)"
          echo "Creating storage account: $STORAGE_ACCOUNT"
          
          az storage account create \
            --resource-group saferide-free-rg \
            --name "$STORAGE_ACCOUNT" \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Create file share for database
          STORAGE_KEY=$(az storage account keys list --resource-group saferide-free-rg --account-name "$STORAGE_ACCOUNT" --query '[0].value' --output tsv)
          
          az storage share create \
            --name "saferide-data" \
            --account-name "$STORAGE_ACCOUNT" \
            --account-key "$STORAGE_KEY"
        else
          STORAGE_KEY=$(az storage account keys list --resource-group saferide-free-rg --account-name "$STORAGE_ACCOUNT" --query '[0].value' --output tsv)
        fi
        
        # Create unique DNS label
        DNS_LABEL="saferide-api-$(date +%s | tail -c 6)"
        
        # Deploy container instance
        az container create \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --image "$LATEST_TAG" \
          --registry-login-server "${{ steps.acr-setup.outputs.acr_login_server }}" \
          --registry-username "$ACR_NAME" \
          --registry-password "$ACR_PASSWORD" \
          --dns-name-label "$DNS_LABEL" \
          --ports 80 \
          --cpu 0.5 \
          --memory 1 \
          --environment-variables \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:80 \
            ConnectionStrings__DefaultConnection="Data Source=/data/saferide.db" \
            UseSQLite=true \
            Authentication__Microsoft__ClientId="${{ secrets.MICROSOFT_CLIENT_ID }}" \
            Authentication__Microsoft__ClientSecret="${{ secrets.MICROSOFT_CLIENT_SECRET }}" \
            Authentication__Microsoft__TenantId="${{ secrets.MICROSOFT_TENANT_ID }}" \
            Email__SmtpPassword="${{ secrets.SMTP_PASSWORD }}" \
          --azure-file-volume-account-name "$STORAGE_ACCOUNT" \
          --azure-file-volume-account-key "$STORAGE_KEY" \
          --azure-file-volume-share-name "saferide-data" \
          --azure-file-volume-mount-path "/data" \
          --restart-policy OnFailure
        
        echo "‚úÖ Container deployed successfully"
    
    - name: Verify Deployment
      run: |
        echo "üß™ Verifying deployment..."
        
        # Wait for container to fully start
        sleep 60
        
        # Get container details
        FQDN=$(az container show \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --query "ipAddress.fqdn" \
          --output tsv)
        
        CONTAINER_STATE=$(az container show \
          --resource-group saferide-free-rg \
          --name saferide-api \
          --query "containers[0].instanceView.currentState.state" \
          --output tsv)
        
        echo "üìã Deployment Summary:"
        echo "   üåê Container URL: http://$FQDN"
        echo "   üìÑ Swagger UI: http://$FQDN/swagger"
        echo "   üîó API Base: http://$FQDN/api"
        echo "   üìä Status: $CONTAINER_STATE"
        
        # Test API health
        echo "üîç Testing API endpoints..."
        for i in {1..10}; do
          if curl -s -f "http://$FQDN/api/health" &>/dev/null; then
            echo "   ‚úÖ Health endpoint: http://$FQDN/api/health"
            break
          else
            echo "   ‚è≥ Attempt $i: Waiting for API to be ready..."
            sleep 30
          fi
        done
        
        # Test Swagger endpoint
        if curl -s -f "http://$FQDN/swagger" &>/dev/null; then
          echo "   ‚úÖ Swagger UI: http://$FQDN/swagger"
        else
          echo "   ‚ö†Ô∏è Swagger UI not yet accessible"
        fi
        
        echo ""
        echo "üéâ Deployment completed!"
        echo "üí∞ Estimated monthly cost: $9.50-16 AUD (0.5 CPU, 1GB RAM)"
        echo "‚ö° To save costs, stop the container when not in use:"
        echo "   az container stop --resource-group saferide-free-rg --name saferide-api"
